{"version":3,"file":"static/js/75.76bcc1af.chunk.js","mappings":"+NA4DA,UAxDa,WACX,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MA4BjB,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,+GAESC,MAAM,GAAD,OANlB,+BAMkB,2DALlB,qCAGI,WAERC,EAFQ,QAKAC,GALA,uBAMZC,EAAAA,GAAAA,MAAY,8BANA,kBAOL,IAAIC,MAAM,UAPL,uBASKH,EAASI,OATd,OASRC,EATQ,OAUdb,EAAUa,EAAKC,SACfZ,EAAU,YAXI,yDAada,QAAQC,IAAR,MACAd,EAAU,YAdI,mBAeP,mCAfO,0DAAH,qDAmBfI,GACD,GAAE,KAGD,gCACc,aAAXL,IACC,iCACE,4CACA,wBACGF,EAAOkB,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACxB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,iBAAYF,GAAMG,MAAO,CAAEC,KAAMpB,GAAzC,gBACGe,QADH,IACGA,EAAAA,EAASE,KAFLD,EAMZ,SAIK,aAAXlB,IAAyB,+CAC1B,SAAC,KAAD,MAGL,C,sBC1DD,SAASuB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["pages/Home/Home.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { ToastContainer, toast } from 'react-toastify';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState('idle');\n\n  const location = useLocation();\n\n  const baseURL = 'https://api.themoviedb.org/3';\n  const API_KEY = 'd25c90b85b8f344798ffe413cdb42b7f';\n\n  useEffect(() => {\n    const fetchHome = async () => {\n      try {\n        const response = await fetch(\n          `${baseURL}/trending/all/day?language=en-US&page=1&api_key=${API_KEY}`\n        );\n        if (!response.ok) {\n          toast.error('Ops, something went wrong!');\n          return new Error('Error');\n        }\n        const data = await response.json();\n        setMovies(data.results);\n        setStatus('resolved');\n      } catch (error) {\n        console.log(error);\n        setStatus('rejected');\n        return <h1>error</h1>;\n      }\n    };\n\n    fetchHome();\n  }, []);\n\n  return (\n    <>\n      {status === 'resolved' && (\n        <>\n          <h1>Trending today</h1>\n          <ul>\n            {movies.map(({ title, id, name }) => {\n              return (\n                <li key={id}>\n                  <Link to={`movies/${id}`} state={{ from: location }}>\n                    {title ?? name}\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </>\n      )}\n      {status === 'rejected' && <h1>A problem occured</h1>}\n      <ToastContainer />\n    </>\n  );\n};\n\nexport default Home;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","movies","setMovies","status","setStatus","location","useLocation","useEffect","fetchHome","fetch","response","ok","toast","Error","json","data","results","console","log","map","title","id","name","to","state","from","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}