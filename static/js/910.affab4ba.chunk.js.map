{"version":3,"file":"static/js/910.affab4ba.chunk.js","mappings":"gNA+DA,UA5Da,WACX,OAA4BA,EAAAA,EAAAA,UAAS,QAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA6BR,OAxBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,iHAESC,MAAM,GAAD,OANlB,+BAMkB,kBACNJ,EADM,2CALlB,qCAGI,WAERK,EAFQ,QAKAC,GALA,yCAML,IAAIC,MAAM,+BANL,uBASOF,EAASG,OAThB,OASRC,EATQ,OAUdV,EAAQU,GAEFC,EAAiBD,EAAOX,KAAKa,OAAO,EAAG,GAC7CZ,EAAQW,GACRb,EAAU,YAdI,kDAgBde,QAAQC,IAAR,MACAhB,EAAU,YAjBI,0DAAH,qDAqBfM,GACD,GAAE,CAACH,KAEF,gCACc,aAAXJ,IACC,wBACGE,EAAKgB,OAAS,GACbhB,EAAKiB,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACvC,OACE,yBACE,4BACE,gBACEC,IAAG,0CAAqCH,GACxCI,IAAG,UAAKH,GACRI,MAAM,QACNC,OAAO,WAET,uCAAeJ,MACf,kCAAUD,SATLF,EAaZ,MAGK,aAAXpB,IAAyB,mDAG/B,C,sBC7DD,SAAS4B,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["components/Cast.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\nconst Cast = () => {\n  const [status, setStayus] = useState('idle');\n  const [cast, setCast] = useState([]);\n  const { movieID } = useParams();\n\n  const baseURL = 'https://api.themoviedb.org/3';\n  const API_KEY = 'd25c90b85b8f344798ffe413cdb42b7f';\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await fetch(\n          `${baseURL}/movie/${movieID}/credits?language=en-US&api_key=${API_KEY}`\n        );\n        if (!response.ok) {\n          return new Error('Oops, something went wrong');\n        }\n\n        const movies = await response.json();\n        setCast(movies);\n\n        const ShorteredMovie = movies.cast.splice(0, 4);\n        setCast(ShorteredMovie);\n        setStayus('resolved');\n      } catch (error) {\n        console.log(error);\n        setStayus('rejected');\n      }\n    };\n\n    fetchCast();\n  }, [movieID]);\n  return (\n    <>\n      {status === 'resolved' && (\n        <ul>\n          {cast.length > 0 &&\n            cast.map(({ cast_id, profile_path, name, character }) => {\n              return (\n                <li key={cast_id}>\n                  <div>\n                    <img\n                      src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                      alt={`${name}`}\n                      width=\"100px\"\n                      heigth=\"150px\"\n                    />\n                    <p>character: {character}</p>\n                    <p>name: {name}</p>\n                  </div>\n                </li>\n              );\n            })}\n        </ul>\n      )}\n      {status === 'rejected' && <h1>Something went wrong</h1>}\n    </>\n  );\n};\n\nexport default Cast;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","status","setStayus","cast","setCast","movieID","useParams","useEffect","fetchCast","fetch","response","ok","Error","json","movies","ShorteredMovie","splice","console","log","length","map","cast_id","profile_path","name","character","src","alt","width","heigth","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}